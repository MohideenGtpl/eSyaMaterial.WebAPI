using System;
using System.Collections.Generic;
using eSyaMaterial.DO;
using eSyaMaterial.IF;
using Microsoft.AspNetCore.Mvc;
using System.Threading.Tasks;


namespace eSyaEnterprise.Areas.InventoryMgmt.Controllers
{
    [Route("api/[controller]/[action]")]
    [ApiController]
    public class ItemGroupCategoryController : ControllerBase
    {
        private readonly IItemGroupCategoryRepository _ItemGroupCategoryRepository;
        public ItemGroupCategoryController(IItemGroupCategoryRepository itemGroupCategoryRepository)
        {
            _ItemGroupCategoryRepository = itemGroupCategoryRepository;
        }


        #region ItemGroup
        public async Task<IActionResult> GetItemGroup()
        {
            var ac = await _ItemGroupCategoryRepository.GetItemGroup();
            return Ok(ac);
        }
        public async Task<IActionResult> GetItemGroupByID(int ItemGroupID)
        {
            var ac = await _ItemGroupCategoryRepository.GetItemGroupByID(ItemGroupID);
            return Ok(ac);
        }
        public async Task<IActionResult> AddOrUpdateItemGroup(DO_ItemGroup obj)
        {
            var msg = await _ItemGroupCategoryRepository.AddOrUpdateItemGroup(obj);
            return Ok(msg);
        }
        #endregion
        #region ItemCategory
        public async Task<IActionResult> GetItemCategory()
        {
            var ac = await _ItemGroupCategoryRepository.GetItemCategory();
            return Ok(ac);
        }
        public async Task<IActionResult> GetItemCategoryByID(int ItemCategory)
        {
            var ac = await _ItemGroupCategoryRepository.GetItemCategoryByID(ItemCategory);
            return Ok(ac); 
        }
        public async Task<IActionResult> AddOrUpdateItemCategory(DO_ItemCategory obj)
        {
            var msg = await _ItemGroupCategoryRepository.AddOrUpdateItemCategory(obj);
            return Ok(msg);
        }
        #endregion
        #region SubCategory
        public async Task<IActionResult> GetItemSubCategoryByCateID(int ItemCategory)
        {
            var ac = await _ItemGroupCategoryRepository.GetItemSubCategoryByCateID(ItemCategory);
            return Ok(ac);
        }
        public async Task<IActionResult> GetItemSubCategoryByID(int ItemSubCategory)
        {
            var ac = await _ItemGroupCategoryRepository.GetItemSubCategoryByID(ItemSubCategory);
            return Ok(ac);
        }
        public async Task<IActionResult> AddOrUpdateItemSubCategory(DO_ItemSubCategory obj)
        {
            var msg = await _ItemGroupCategoryRepository.AddOrUpdateItemSubCategory(obj);
            return Ok(msg);
        }
        public async Task<IActionResult> GetItemSParameter()
        {
            var ac = await _ItemGroupCategoryRepository.GetItemSParameter();
            return Ok(ac);
        }
        #endregion
        #region ItemGroupCategoryMapping
        public async Task<IActionResult> GetItemCategoryByItemGroupID(int ItemGroup)
        {

            var ac = await _ItemGroupCategoryRepository.GetItemCategoryByItemGroupID(ItemGroup);
            return Ok(ac);

        }
        public async Task<IActionResult> GetItemCategoryByItemGroupCategory(int ItemGroup, int ItemCategory)
        {
            var ac = await _ItemGroupCategoryRepository.GetItemCategoryByItemGroupCategory(ItemGroup, ItemCategory);
            return Ok(ac);
        }
        public async Task<IActionResult> ItemGroupCateSubCateMapping(DO_ItemGroupCategory obj)
        {
            var msg = await _ItemGroupCategoryRepository.ItemGroupCateSubCateMapping(obj);
            return Ok(msg);
        }
        public async Task<IActionResult> GetMappinRecord(int ItemGroupID, int ItemCategory, int ItemSubCategory)
        {
            var ac = await _ItemGroupCategoryRepository.GetMappinRecord(ItemGroupID, ItemCategory, ItemSubCategory);
            return Ok(ac);
        }
        #endregion
    }


}